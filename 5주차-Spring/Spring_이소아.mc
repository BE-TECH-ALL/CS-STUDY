# Spring과 SpringBoot의 차이점
스프링 프레임워크(Spring Framework)는 자바 플랫폼을 위한 오픈소스 애플리케이션 프레임워크로서 간단히 스프링(Spring)이라고도 불립니다. 동적인 웹 사이트를 개발하기 위한 여러 가지 서비스를 제공하고 있습니다.
스프링 프레임워크는 기능이 많은만큼 환경설정이 복잡한 편. 이에 어려움을 느끼는 사용자들을 위해 나온 것이 바로 스프링 부트. 스프링 부트는 스프링 프레임워크를 사용하기 위한 설정의 많은 부분을 자동화하여 사용자가 정말 편하게 스프링을 활용할 수 있도록 돕는다. 스프링 부트 starter 디펜던시만 추가해주면 바로 API를 정의하고, 내장된 탐캣이나 제티로 웹 애플리케이션 서버를 실행할 수 있다. 

# Filter와 Interceptor의 차이에 대해 설명해주세요.
필터는 J2EE 표준 스펙의 기능이며, 클라이언트의 요청이 들어올 때 Web Context영역 안에서 디스패처 서블릿(Dispatcher Servlet)에 요청이 전달되기 전/후에 URL 패턴에 맞는 모든 요청에 대해 부가 작업을 처리할 수 있는 기능을 제공합니다.
인터셉터는 스프링 MVC가 제공하는 기능으로, 필터 이후 실행되며 디스패처 서블릿과 컨트롤러 사이에서 컨트롤러 호출 전에 호출됩니다. 이전 디스패처 서블릿의 글에서 설명한 HandlerMapping을 지나 인터셉터가 존재한다면 인터셉터를 실행하고 없는 경우 바로 컨트롤러를 호출합니다.

# Spirng DI란?
DI란 개발자가 Spring 프레임워크에 의존성을 주입하면서 객체 간 결합을 느슨하게 하는 것입니다.
객체 간 결합이 느슨하면 코드의 재사용성이 증가하고, 단위 테스트가 용이해집니다.

# Spring IoC란?
IoC는 컨트롤의 제어권이 개발자에게 있는 것이 아닌 프레임워크가 대신해서 해주는 것을 말합니다. Servlet이나 Bean 같은 코드를 개발자가 직접 작성하지 않고, 프레임워크가 대신 수행합니다.
제어의 역전이라는 말이 어려울 수 있는데, 기존에는 자바 코드를 작성할 때 객체의 생성, 의존관계 설정 등을 개발자가 해줘야 했지만, 프레임워크가 대신해준다는 의미입니다.

# Spring DI/IoC는 어떻게 동작하나요?
IoC(제어의 역전)은 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것으로 코드의 최종호출은 개발자가 제어하는 것이 아닌 프레임워크의 내부에서 결정된 대로 이루어집니다.

DI(의존관계 주입)은 Spring 프레임워크에서 지원하는 IoC의 형태로 클래스 사이의 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동으로 연결해줍니다.

스프링에서는 스프링 컨테이너 ApplicationContext를 이용하여 설정 정보를 생성, 등록하고 필요한 객체를 생성자 혹은 setter를 통해 주입합니다.


# Spring AOP란?
AOP는 핵심기능을 제외한 부수적인 기능을 프레임워크가 제공하는 특징입니다. 예를 들어 Spring 프로젝트에 security를 적용하거나, logging 등을 추가하고 싶을 때 기존 비즈니스 로직을 건들지 않고 AOP로 추가할 수 있습니다.

# Spring Bean란 무엇인가요?
IoC 컨테이너 안에 들어있는 객체로 필요할 때 IoC컨테이너에서 가져와서 사용합니다. @Bean 을 사용하거나 xml설정을 통해 일반 객체를 Bean으로 등록할 수 있습니다.

# Spring Bean Scope의 종류와 각각의 범위에 대해서 설명해주세요.
Spring Bean의 Scope는 빈이 존재할 수 있는 생명 주기(범위)를 뜻하며,
Singleton, Prototype, Request, Session, Application, Websocket 등이 있습니다.

Singleton은 기본값으로 스프링 컨테이너의 시작과 종료까지 단 하나의 객체만 생성됩니다.
Prototype은 빈의 생성부터 의존관계 주입까지만 관여하며 스프링 컨테이너에게 빈을 요청할 때마다 매번 새로운 객체가 생성됩니다.
Request는 요청이 들어와서 나갈때까지 각각의 HTTP Request마다 단 하나의 객체만 생성됩니다.
Session은 HTTP Session과 동일한 생명주기를 가지며 각 세션당 단 하나의 객체만 생성됩니다.
Application은 ServletContext와 동일한 생명주기를 가지며 각 Application당 단 하나의 객체만 생성됩니다.
WebSocket은 WebSocket과 동일한 생명주기를 가지며 각 WebSocket당 단 하나의 객체만 생성됩니다.

# IoC 컨테이너의 역할은 무엇이 있을까요?
애플리케이션 실행시점에 빈 오브젝트를 인스턴스화하고 DI 한 후에 최초로 애플리케이션을 기동할 빈 하나를 제공해준다.

# DI 종류는 어떤것이 있고, 이들의 차이는 무엇인가요?
DI는 세가지 방법이 있습니다. 생성자 삽입, Setter를 이용한 메소드 매개 변수 삽입, 필드 주입이 있습니다.

생성자 주입은 생성자 호출시점에 딱 1번만 호출되는 것을 보장하며 불변, 필수 의존관계에 사용합니다.

Setter주입은 선택, 변경 가능성이 있는 의존관계에 사용되며 스프링빈을 선택적으로 등록이 가능합니다.

필드 주입은 `@Autowired` 를 사용하는데 외부에서 변경이 불가능하여 테스트 하기 힘듭니다. DI 프레임워크 없이는 작동하기 힘들며, 주로 애플리케이션과 관계없는 테스트코드나 `@Configuration` 같은 스프링 설정 목적으로 사용합니다.
